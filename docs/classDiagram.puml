@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
class Resource implements Collectable {
    -amount: int
    +collect(player: Virologist)
}

enum ResourceType {
    AminoAcid
    Nucleotide
}
'class AminoAcid extends Resource {
'
'}
'class Nucleotide extends Resource {
'
'}
Resource *-- "-type, 1" ResourceType

abstract class Agent implements Effect, Collectable{
{static} {abstract} +create(player: Virologist): Agent
    -createPrice: Resource
}
class AmnesiaVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(player: Virologist)
}

class StunVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(player: Virologist)
}
class VitusDanceVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(player: Virologist)
}
class Vaccine extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(player: Virologist)
}

class Virologist {
    +moveTo(id: int)
    +getCollectedItems(): Collectable[]
    +addCollectableItem(collectedItem: Collectable)
    +removeCollectableItem(removedItem: Collectable)
}

class Inventory {
    +addCollectable(newGeneticCode: GeneticCode)
    +addCollectable(newEquipment: Equipment)
    +addCollectable(agent: Agent)
    +addCollectable(newResource: Resource)
}
interface Effect {
    +impact()
}
class GeneticCode implements Collectable{
    +collect(player: Virologist)
}

interface Collectable {
    +collect(player: Virologist)
}

Virologist *-- "-inventory, 1" Inventory
Virologist *-- "-learntCodes, 0..*" GeneticCode
Virologist <-- "-activeEffects, 0..*" Effect

Inventory *-- "-pickedUpEquipments, 0. .*" Equipment
Inventory *-- "-craftedAgents, 0..*" Agent
Inventory *-- "-resources, N" Resource

GeneticCode *-- "-requirements ,N" Resource
GeneticCode *-- "-agent, 1" Agent

Virologist "-players 0..*" - "-activeTile, 1" Tile

abstract class Equipment implements Effect, Collectable {

}
class ProtectiveCloak extends Equipment {
    +collect(player: Virologist)
    +impact()
}

class Bag extends Equipment{
    +collect(player: Virologist)
    +impact()
}
class Glove extends Equipment {
    +collect(player: Virologist)
    +impact()
}

'There is Collectable getter because EmptyTile must have a getter either
abstract class Tile {
    #id: int
    {abstract}+collectItem(player: Virologist)
    {abstract} +getCollectableItem(): Collectable
}
class Laboratory extends Tile {
    +collectItem(player: Virologist)
    +getCollectableItem(): Collectable
}

class Safehouse extends Tile {
    +collectItem(player: Virologist)
    +getCollectableItem(): Collectable
}
class Warehouse extends Tile {
    +collectItem(player: Virologist)
    +getCollectableItem(): Collectable
}
class EmptyTile extends Tile {
    +collectItem(player: Virologist)
    +getCollectableItem(): Collectable
}

class Map {
    +loadMap()
}
Laboratory *-- "-code, 1" GeneticCode
Safehouse *-- "-equipment, 1" Equipment
Warehouse *-- "-collectable, 1" Resource

Map  *-- "-tiles, L" Tile
Tile <-- "-neighbours, 1..K" Tile


class Controller {
    -activePlayer: int
    +startGame()
    +getActiveCollectableItems(): Collectable[]
    +getActiveNeighbours(): Tile[]
}
Controller *-- "-map, 1" Map
Controller *-- "-players, 2..M" Virologist
Controller *-- "-codes, J" GeneticCode

@enduml