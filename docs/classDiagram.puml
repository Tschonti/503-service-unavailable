@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
class Resource implements Collectable {
    -amount: int
    +collect(inv: Inventory)
    {static} getResourceByType(resources: Resource[], type: ResourceType): Resource
}

enum ResourceType {
    AminoAcid
    Nucleotide
}
Resource *-- "-type, 1" ResourceType

abstract class Agent implements Effect, Collectable {
    #roundsLeft: int
    #active: bool
    {static} {abstract} +create(): Agent
    {abstract} +impact()
    'Lehet nem is kell
    {abstract} +collect(inv: Inventory)
}

class AmnesiaVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(inv: Inventory)
}

class StunVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(inv: Inventory)
}
class VitusDanceVirus extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(inv: Inventory)
}
class Vaccine extends Agent{
    {static} +create(): Agent
    +impact()
    +collect(inv: Inventory)
}

class Virologist {
    -actionsLeft: int
    +moveTo(id: int)
    +getCollectedItems(): Collectable[]
    'az alap useCase-ek:
    +pickUp()
    +craft(code: GeneticCode)
    +useAgent(agent: Agent, v: Virologist)
    +steal(Virologist v)
    +pass()
}

class Inventory {
    -maxResourceAmount: int
    +addGeneticCode(newGeneticCode: GeneticCode)
    +addEquipment(newEquipment: Equipment)
    +addCraftedAgent(newAgent: Agent)
    +addResource(newResource: Resource)
    +removeGeneticCode(removedGeneticCode: GeneticCode)
    +removeEquipment(removedEquipment: Equipment)
    +removeCraftedAgent(removedAgent: Agent)
    +removeResource(removedResource: Resource)
}
interface Effect {
    +impact()
}
class GeneticCode implements Collectable {
    +collect(inv: Inventory)
    +isCraftable(resources: Resource[]): boolean
    +craft(inv: Inventory)
}

interface Collectable {
    +collect(inv: Inventory)
}

Virologist *-- "-inventory, 1" Inventory
Virologist --> "-activeEffects, 0..*" Effect

Inventory *-- "-learntCodes, 0..*" GeneticCode
Inventory *-- "-pickedUpEquipments, 0. .*" Equipment
Inventory *-- "-craftedAgents, 0..*" Agent
Inventory *-- "-resources, N" Resource

GeneticCode *-- "-price ,N" Resource
GeneticCode *-- "-agent, 1" Agent

Virologist "-players 0..*" - "-activeTile, 1" Tile

abstract class Equipment implements Effect, Collectable {
    {abstract} +impact()
    {abstract} +collect(inv: Inventory)

}
class ProtectiveCloak extends Equipment {
    +collect(inv: Inventory)
    +impact()
}

class Bag extends Equipment{
    +collect(inv: Inventory)
    +impact()
}
class Glove extends Equipment {
    +collect(inv: Inventory)
    +impact()
}

'There is Collectable getter because EmptyTile must have a getter either
abstract class Tile {
    #id: int
    #name: string
    {abstract} +collectItem(inv: Inventory)
    {abstract} +getCollectableItem(): Collectable
}
class Laboratory extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}

class Safehouse extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}
class Warehouse extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}
class EmptyTile extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}

class Map {
    +loadMap()
}
Laboratory *-- "-code, 1" GeneticCode
Safehouse *-- "-equipment, 1" Equipment
Warehouse *-- "-collectable, 1" Resource

Map  *-- "-tiles, L" Tile
Tile <-- "-neighbours, 1..K" Tile


class Controller {
    -activePlayer: int
    +startGame()
    +getActiveCollectableItems(): Collectable[]
    +getActiveNeighbours(): Tile[]
}
Controller *-- "-map, 1" Map
Controller *-- "-players, 2..M" Virologist
Controller *-- "-codes, J" GeneticCode

@enduml