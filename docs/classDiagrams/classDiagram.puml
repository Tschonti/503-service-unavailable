@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Resource implements Collectable {
    -amount: int
    -type: ResourceType
    +collect(inv: Inventory)
    {static} getResourceByType(resources: Resource[], type: ResourceType): Resource

}

enum ResourceType {
    AminoAcid
    Nucleotide
}

Resource -- ResourceType #line:white

abstract class Agent implements Effect {

    #roundsLeft: int
    +use(from: Virologist, to: Virologist)
    {static} {abstract} +create(): Agent
    /'             Effect interface            '/
    +onTurnImpact(to: Virologist): void
    +endTurnImpact(to: Virologist): void
    +counterImpact(agent: Agent, from: Virologist, to: Virologist)
    +allowStealing(): boolean
    +decrement(v: Virologist): void
    +infect(infector: Virologist)
}

class AmnesiaVirus extends Agent{
    {static} +create(): Agent
    +onTurnImpact(to: Virologist)
}

class StunVirus extends Agent{
    {static} +create(): Agent
    +onTurnImpact(to: Virologist)
    +allowStealing(): boolean
}
class VitusDanceVirus extends Agent{
    {static} +create(): Agent
    +onTurnImpact(to: Virologist)
}
class BearDanceVirus extends Agent {
    {static} +create(): Agent
    +onTurnImpact(to: Virologist)
    +counterImpact(agent: Agent, from: Virologist, to: Virologist)
    +infect(infector: Virologist)
    +decrement(v: Virologist)
}
class Vaccine extends Agent{
    {static} +create(): Agent
    +counterImpact(agent: Agent, from: Virologist, to: Virologist)
}

class Virologist {
    -actionsLeft: int
    +addEffect(effect: Effect)
    +removeEffect(effect:Effect)
    'default useCases:
    -moveTo(newTile: Tile)
    -pickUp()
    -craft(code: GeneticCode)
    -dropEquipment(eq: Equipment)
    -useAgent(agent: Agent, v: Virologist)
    -steal(Virologist v)
    +pass()
    'useCase wrappers
    -getNeighbours(): Tile[]
    -getCraftables(): GeneticCode[]
    -getCraftedAgents(): Agent[]
    -getNearbyVirologists(): Virologist[]
    -getNearbyVirologistsToStealFrom(): Virologist[]
    +myTurn()
}

class Inventory {
    -maxResourceAmount: int
    +addGeneticCode(gc: GeneticCode)
    +addEquipment(eq: Equipment)
    +addCraftedAgent(agent: Agent)
    +addResource(res: Resource)
    +addUsableEquipment(UsableEquipment ue)
    +removeGeneticCode(gc: GeneticCode)
    +removeEquipment(eq: Equipment): boolean
    +removeCraftedAgent(agent: Agent)
    +removeResource(res: Resource)
    +removeUsableEquipment(UsableEquipment ue)
    +steal(from: Inventory, what: Equipment)
}


interface Effect {
    +onTurnImpact(to: Virologist)
    +endTurnImpact(to: Virologist)
    +counterImpact(agent: Agent, from: Virologist, to: Virologist)
    +allowStealing(): boolean
    +decrement(v: Virologist)
    +infect(infector: Virologist)
}
class GeneticCode implements Collectable {
    +collect(inv: Inventory) /'Collectable'/
    +isCraftable(inv: Inventory): boolean
    +craft(inv: Inventory)
}

interface Collectable {
    +collect(inv: Inventory)
}

Tile ..> Collectable
Collectable ..> Inventory
Virologist ..> GeneticCode
Virologist ..> Agent
Equipment ..> Agent

Virologist "-virologist, 1" -- "-inventory, 1" Inventory
Virologist *-- "-activeEffects, 0..*" Effect

Inventory *-- "-learntCodes, 0..*" GeneticCode
Inventory --> "-pickedUpEquipments, 0..*" Equipment
Inventory --> "-craftedAgents, 0..*" Agent
Inventory --> "-resources, N" Resource

GeneticCode *-- "-price, N" Resource
GeneticCode *-- "-agent, 1" Agent

Virologist "-players, 0..*" -- "-activeTile, 1" Tile

abstract class Equipment implements Effect, Collectable {
    #usesLeft: int
    +collect(inv: Inventory)
    /'             Effect interface            '/
    +onTurnImpact(to: Virologist)
    +endTurnImpact(to: Virologist)
    +infect(infector: Virologist)
    +counterImpact(agent: Agent, from: Virologist, to: Virologist)
    +allowStealing(): boolean
    +decrement(Virologist v)
    +durabilityDecreases(v: Virologist)
}
class ProtectiveCloak extends Equipment {
    +counterImpact(agent: Agent, from: Virologist, to: Virologist) /'Equipment'/
}

class Bag extends Equipment{
    +onTurnImpact(to: Virologist): void /'Equipment'/
    +endTurnImpact(to: Virologist): void /'Equipment'/
}
class Glove extends Equipment {
    +counterImpact(agent: Agent, from: Virologist, to: Virologist) /'Equipment'/
    +durabilityDecreases(v: Virologist)
}
'new
class Axe extends Equipment implements UsableEquipment {
    +use(v: Virologist)
    +onTurnImpact(to: Virologist
    +endTurnImpact(to: Virologist)
}

abstract class Tile {
    #id: int
    #name: string
    +getPlayersToStealFrom(): Virologist[]
    {abstract} +collectItem(inv: Inventory)
    {abstract} +getCollectableItem(): Collectable
    +addVirologist(player: Virologist)
    +removeVirologist(player: Virologist)
}

together {
    class Laboratory extends Tile {
        +collectItem(inv: Inventory)
        +getCollectableItem(): Collectable
    }

    class InfectedLaboratory extends Laboratory {
         +addVirologist(player: Virologist)
    }
}

Agent " -agent, 1" *-- InfectedLaboratory

class Safehouse extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}
class Warehouse extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}
class EmptyTile extends Tile {
    +collectItem(inv: Inventory)
    +getCollectableItem(): Collectable
}

class Map {
    +createMap()
}

Laboratory *-- " #code, 1" GeneticCode
Safehouse *-- "-equipment, 1\n" Equipment
Warehouse *-- "-collectable, 1" Resource

Map  *-- "-tiles, L" Tile
Tile <-- "-neighbours, 1..K" Tile

class Controller {
    -activePlayer: int
    +startGame(): void
    +checkWinner(v: Virologist): void
    -nextRound(): void
    +removeVirologist(v: Virologist)
}

interface UsableEquipment {
    use(v: Virologist)
}

Inventory *-- "-usableEquipments, 0..*" UsableEquipment

Controller *-- "-map, 1" Map
Controller "-controller" -- "-players, 2..M" Virologist
Controller *-- "-codes, J" GeneticCode

@enduml